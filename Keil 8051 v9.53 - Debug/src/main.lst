C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 21:00:16 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\src\main.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Binyami
                    -n\SimplicityStudio\v4_workspace\EFM8BB3_PowerModes_3\src\main.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2)
                    - FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Binyamin\SimplicityStudio\
                    -v4_workspace\EFM8BB3_PowerModes_3\inc;C:\Users\Binyamin\SimplicityStudio\v4_workspace\EFM8BB3_PowerModes_3\inc\config;C:
                    -\Users\Binyamin\SimplicityStudio\v4_workspace\EFM8BB3_PowerModes_3\inc\graphics;C:/SiliconLabs/SimplicityStudio/v4/devel
                    -oper/sdks/8051/v4.0.3//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/EFM8BB3_SLSTK
                    -2022A/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;C:/S
                    -iliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/graphics;C:/SiliconLa
                    -bs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;C:/SiliconLabs/Simplic
                    -ityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/peripheral_driver/inc;C:/SiliconLabs/SimplicityStudio/v4/develop
                    -er/sdks/8051/v4.0.3//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8
                    -BB3/inc) PRINT(.\src\main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\main.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // main.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2015 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This example demonstrates the available power modes on the EFM8BB3 STK using
  10          // the LCD and push buttons.
  11          //
  12          //-----------------------------------------------------------------------------
  13          // How To Test: EFM8BB3 STK
  14          //-----------------------------------------------------------------------------
  15          // 1) Place the SW104 switch in "AEM" mode.
  16          // 2) Connect the EFM8BB3 STK board to a PC using a mini USB cable.
  17          // 3) Compile and download code to the EFM8BB3 STK board.
  18          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  19          //    click the Debug button in the quick menu, or press F11.
  20          // 4) Run the code.
  21          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  22          //    click the Resume button in the quick menu, or press F8.
  23          // 5) The power modes example should start.
  24          // 6) Press PB1 to cycle through the 6 different power modes shown on
  25          //    the LCD.
  26          // 7) Press PB0 to enter the selected power mode. The LED turns off.
  27          //    For all modes except Shutdown, the display will show "*Active*" while
  28          //    in the mode. For Shutdown mode the display is turned off.
  29          // 8) Press PB0 (all modes except Stop and Shutdown) to return to the menu,
  30          //    or press Reset (all modes) to restart the example. The LED turns on.
  31          //
  32          // Target:         EFM8BB3
  33          // Tool chain:     Generic
  34          //
  35          // Release 0.1 (MD;AT)
  36          //    - Initial Revision
  37          //    - 1 APR 2016
  38          //
  39          //-----------------------------------------------------------------------------
  40          // Resources:
  41          //-----------------------------------------------------------------------------
  42          // SYSCLK - 24.5 MHz HFOSC0 / 1
  43          // SPI0   - 1 MHz
  44          // Timer2 - 2 MHz (SPI CS delay)
  45          // Timer3 - 1 kHz (1 ms tick)
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 21:00:16 PAGE 2   

  46          // P2.6 - Display CS (Active High)
  47          // P0.6 - SCK
  48          // P1.0 - MOSI
  49          // P1.4 - LED G
  50          // P0.2 - Push Button 0
  51          // P0.3 - Push Button 1
  52          // P1.7 - Joystick (THIS IS NOW USED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
             -)
  53          // P3.4 - Display enable
  54          //
  55          //-----------------------------------------------------------------------------
  56          #include <stdlib.h>
  57          #include <string.h>
  58          #include <stdio.h>
  59          #include "bsp.h"
  60          #include "pwr.h"
  61          #include "adc.h"
*** WARNING C318 IN LINE 61 OF C:\Users\Binyamin\SimplicityStudio\v4_workspace\EFM8BB3_PowerModes_3\src\main.c: can't op
             -en file 'adc.h'
  62          #include "joystick.h"
*** WARNING C318 IN LINE 62 OF C:\Users\Binyamin\SimplicityStudio\v4_workspace\EFM8BB3_PowerModes_3\src\main.c: can't op
             -en file 'joystick.h'
  63          #include "draw.h"
  64          #include "tick.h"
  65          #include "InitDevice.h"
  66          
  67          
  68          
  69          
  70          //-----------------------------------------------------------------------------
  71          // Local Definitions
  72          //-----------------------------------------------------------------------------
  73          
  74          // Power mode enumeration
  75          #define NORMAL_MODE 0
  76          #define IDLE_MODE 1
  77          #define STOP_MODE 2
  78          #define SUSPEND_MODE 3
  79          #define SNOOZE_MODE 4
  80          #define SHUTDOWN_MODE 5
  81          #define LAST_POWER_MODE SHUTDOWN_MODE
  82          #define BC_DISCONNECTED 0
  83          SI_SBIT (BC_EN, SFR_P2, 2);            // Board Controller Enable
  84          
  85          SI_VARIABLE_SEGMENT_POINTER(powerModeText[], char, SI_SEG_CODE) =
  86          {
  87            "0. Normal Mode",
  88            "1. Idle Mode",
  89            "2. Stop Mode",
  90            "3. Suspend Mode",
  91            "4. Snooze Mode",
  92            "5. Shutdown Mode",
  93          };
  94          
  95          // Power mode status
  96          #define STATUS_MODE_ACTIVE 0
  97          #define STATUS_MODE_WAKEUP 1
  98          
  99          SI_VARIABLE_SEGMENT_POINTER(powerStatusText[], char, SI_SEG_CODE) =
 100          {
 101            "*Active*",
 102            "*Wakeup*",
 103          };
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 21:00:16 PAGE 3   

 104          
 105          // Function that demonstrates the available power modes
 106          //void APP_enterPowerMode(uint8_t mode);
 107          
 108          
 109          //-----------------------------------------------------------------------------
 110          // User Interface Functions
 111          //-----------------------------------------------------------------------------
 112          
 113          // Push button assignments
 114          #define UI_BTN_MENU   (1 << 0)
 115          #define UI_BTN_SELECT (1 << 1)
 116          
 117          // Read and return push button status
 118          uint8_t UI_getButtons(void)
 119          {
 120   1        uint8_t status = 0;
 121   1        if (BSP_PB1 == BSP_PB_PRESSED) {
 122   2          status = UI_BTN_MENU;
 123   2        } else if (BSP_PB0 == BSP_PB_PRESSED) {
 124   2          status = UI_BTN_SELECT;
 125   2        }
 126   1        return status;
 127   1      }
 128          
 129          // Manage the UI menu and return the user selection
 130          uint8_t UI_getPowerMode(uint8_t mode)
 131          {
 132   1        // Initialize the display and draw the UI
 133   1        DISP_Init();
 134   1        DrawSplashScreen();
 135   1        DrawScreenText(powerModeText[mode], TEXT_ROW0_Y);
 136   1      
 137   1        // Menu selection loop
 138   1        while (true)
 139   1        {
 140   2          // Wait for button press leading edge
 141   2          while (UI_getButtons() != 0);
 142   2          while (UI_getButtons() == 0);
 143   2      
 144   2          // Cycle menu through available modes
 145   2          if (UI_getButtons() & UI_BTN_MENU)
 146   2          {
 147   3            mode++;
 148   3            if (mode > LAST_POWER_MODE)
 149   3            {
 150   4              mode = NORMAL_MODE;
 151   4            }
 152   3            DrawScreenText(powerModeText[mode], TEXT_ROW0_Y);
 153   3          }
 154   2          // Selection made, break out of menu loop
 155   2          else if (UI_getButtons() & UI_BTN_SELECT)
 156   2          {
 157   3            break;
 158   3          }
 159   2        }
 160   1      
 161   1        // Wait for all buttons to be released
 162   1        while (UI_getButtons() != 0);
 163   1      
 164   1        // Display mode status, turn off the LED and return the selection
 165   1        DrawScreenText(powerStatusText[STATUS_MODE_ACTIVE], TEXT_ROW1_Y);
 166   1        BSP_LED_G = BSP_LED_OFF;
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 21:00:16 PAGE 4   

 167   1        return mode;
 168   1      }
 169          
 170          // Disables the LCD display
 171          void UI_disableDisplay(void)
 172          {
 173   1        // Clear the display screen
 174   1        DISP_ClearAll();
 175   1        // Wait for BSP to complete all display updates
 176   1        while (BSP_DISP_CS == SPI_CS_ASSERT_LVL);
 177   1        // Disable the display
 178   1        BSP_DISP_EN = DISP_EN_BC;
 179   1      }
 180          
 181          // Port Match ISR - Triggered on leading edge of UI_BTN_SELECT.
 182          
 183          int previousflag;
 184          int button_flag = 0;
 185          int flag2 = 0;
 186          extern void changedisplay(void); //prototype
 187           SI_INTERRUPT (PMATCH_ISR, PMATCH_IRQn)
 188          {
 189   1        // Turn on LED whenever UI_BTN_SELECT is pressed
 190   1        //BSP_LED_G = BSP_LED_ON;
 191   1               button_flag = -1*button_flag;
 192   1               flag2 = -1 * flag2;
 193   1      }
 194          
 195          
 196          
 197          
 198          
 199          
 200          
 201          
 202          
 203          
 204          
 205          
 206          #define JOYSTICK_MV_C          3       ///< center position in mV
 207          #define JOYSTICK_MV_N          2831    ///< north position in mV
 208          #define JOYSTICK_MV_E          2533    ///< east position in mV
 209          #define JOYSTICK_MV_S          1650    ///< south position in mV
 210          #define JOYSTICK_MV_W          1980    ///< west position in mV
 211          
 212          #define JOYSTICK_MV_ERROR      150
 213          
 214          #define JOYSTICK_NONE          0       ///< not pressed
 215          #define JOYSTICK_C             1       ///< center
 216          #define JOYSTICK_N             2       ///< north
 217          #define JOYSTICK_E             3       ///< east
 218          #define JOYSTICK_S             4       ///< south
 219          #define JOYSTICK_W             5       ///< west
 220          
 221          
 222           uint8_t JOYSTICK_convert_mv_to_direction(uint32_t mV);
 223          
 224          
 225          
 226          
 227          
 228          
 229          
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 21:00:16 PAGE 5   

 230          
 231          
 232          
 233          
 234          
 235          char var[8]= {0,0,0,0,0,0,0,0};
 236          int tester;
 237          char array2[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 238          char array1[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 239          int flagX;
 240          int flagY;
 241          int startrender;
 242          int endrender;
 243          char testarr[5];
 244          char temps[16];
 245          char wholebuf[30][16];
 246          uint8_t dir;
 247          uint8_t dir_flag = 0;
 248          int linewidth=0;
 249          int linelength=0;
 250          int m;
 251          int l;
 252          int lineCount = 0;
 253          char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 254          int k = 0;
 255          int j;
 256          int counter = 0;
 257          int c = 0;
 258          int i = 0;
 259          char testChar;
 260          #define UART_BUFFERSIZE        64
 261          int write_flag=0;
 262          
 263          
 264          SI_INTERRUPT (ADC0EOC_ISR, ADC0EOC_IRQn)
 265          {
 266   1        uint32_t mV;
 267   1        P1_B4 = !P1_B4;
 268   1      
 269   1        ADC0CN0_ADINT = 0; // Clear ADC0 conv. complete flag
 270   1      
 271   1        mV = (ADC0 * (uint32_t) 3300) / 1023;
 272   1      
 273   1        dir = JOYSTICK_convert_mv_to_direction(mV);
 274   1      
 275   1      }
 276          
 277          
 278          
 279          //-----------------------------------------------------------------------------
 280          // Global Variables
 281          //-----------------------------------------------------------------------------
 282          uint8_t UART_Buffer[UART_BUFFERSIZE];
 283          uint8_t UART_Buffer_Size = 0;
 284          uint8_t UART_Input_First = 0;
 285          uint8_t UART_Output_First = 0;
 286          uint8_t TX_Ready =1;
 287          uint8_t Byte = 0;
 288          
 289          //-----------------------------------------------------------------------------
 290          // UART0_ISR
 291          //-----------------------------------------------------------------------------
 292          //
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 21:00:16 PAGE 6   

 293          // UART0 ISR Content goes here. Remember to clear flag bits:
 294          // SCON0::RI (Receive Interrupt Flag)
 295          // SCON0::TI (Transmit Interrupt Flag)
 296          //
 297          // This routine is invoked whenever a character is entered or displayed on the
 298          // Hyperterminal.
 299          //
 300          //-----------------------------------------------------------------------------
 301          
 302          
 303          SI_INTERRUPT (UART0_ISR, UART0_IRQn)
 304          {
 305   1                 if (SCON0_RI == 1)
 306   1                 {
 307   2                    if( UART_Buffer_Size == 0)  {    // If new word is entered
 308   3                       UART_Input_First = 0;    }
 309   2      
 310   2                    SCON0_RI = 0;                          // Clear interrupt flag
 311   2      
 312   2                    Byte = SBUF0;                    // Read a character from UART
 313   2      
 314   2      
 315   2      
 316   2                    /*//Individual strings approach
 317   2                    if ((linelength == 0) && (linewidth < 16)){
 318   2                        array1[linewidth] = Byte;
 319   2                        linewidth++;
 320   2                    }else{
 321   2                        linelength++;
 322   2                        linewidth = 0;
 323   2                    }
 324   2      
 325   2                    if((linelength == 1) && (linewidth<16)){
 326   2                        array2[linewidth] = Byte;
 327   2                        linewidth++;
 328   2                    }else{
 329   2                        linelength++;
 330   2                        linewidth = 0;
 331   2                    }
 332   2                */
 333   2      
 334   2      
 335   2      
 336   2                    if (linewidth<16){
 337   3                       wholebuf[linelength][linewidth] = Byte;
 338   3                      // array1[linewidth] = Byte;
 339   3                       linewidth++;
 340   3                      // wholebuf[0][0] = Byte;
 341   3      
 342   3               }
 343   2               else{
 344   3                       linelength++;
 345   3                       linewidth = 0;
 346   3                       wholebuf[linelength][linewidth] = Byte;
 347   3                       linewidth++;
 348   3               }
 349   2      
 350   2      
 351   2      
 352   2                    if (UART_Buffer_Size < UART_BUFFERSIZE)
 353   2                    {
 354   3                       UART_Buffer[UART_Input_First] = Byte; // Store in array
 355   3      
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 21:00:16 PAGE 7   

 356   3                       UART_Buffer_Size++;           // Update array's size
 357   3      
 358   3                       UART_Input_First++;           // Update counter
 359   3                    }
 360   2      
 361   2                    write_flag = 1;
 362   2      
 363   2                 }
 364   1                 //Byte = 0;
 365   1      }
 366          
 367          //-----------------------------------------------------------------------------
 368          // Example main()
 369          //-----------------------------------------------------------------------------
 370          void main(void)
 371          {
 372   1          uint8_t modeSelected = NORMAL_MODE;
 373   1          BC_EN = BC_DISCONNECTED;
 374   1          linelength = 0;
 375   1          linewidth = 0;
 376   1      
 377   1        // Initialize the device
 378   1        enter_DefaultMode_from_RESET();
 379   1      
 380   1        // Safety trap. Press either push button while resetting the device to
 381   1        // stall the application here.
 382   1        //while (UI_getButtons());
 383   1      
 384   1        // Start with the LED on
 385   1        BSP_LED_G = BSP_LED_ON;
 386   1      
 387   1        // Enable all interrupts
 388   1        IE_EA = 1;
 389   1        for (j = 0; i<128; i++){
 390   2                DrawScreenText("                             ", i); //clear whole LCD
 391   2        }
 392   1      
 393   1        //DrawScreenText("NORTH WAS PRESSED", 50);
 394   1        // Mainloop
 395   1      
 396   1        testarr[0] = 0;
 397   1        testarr[1] = 0;
 398   1        testarr[2] = 0;
 399   1        testarr[3] = 0;
 400   1        testarr[4] = 0;
 401   1        for(l=0 ;  l<30 ; l++){
 402   2                for (c = 0; c<16; c++){
 403   3                        wholebuf[l][c] = 0;
 404   3                    temp[c] = 0;
 405   3                    temps[c] = 0;
 406   3                    button_flag = -1;
 407   3                    flag2 = -1;
 408   3                }
 409   2        }
 410   1        previousflag = flag2;
 411   1      
 412   1        //wholebuf[0][3] = 66;
 413   1        while (true)
 414   1        {
 415   2      
 416   2      
 417   2                /*
 418   2                for(flagY = 0; flagY<15; flagY++){
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 21:00:16 PAGE 8   

 419   2                        for(flagX = 0; flagX < 2; flagX++){
 420   2                                sprintf(&temps, "0x%x 0x%x 0x%x", wholebuf[linelength-14+flagY][0], wholebuf[linelength-14+fla
             -gY][1],
 421   2                                                wholebuf[linelength-14+flagY][2]);
 422   2                                DrawScreenText(temps, flagY*8);
 423   2                        }
 424   2                        */
 425   2      
 426   2      
 427   2                            /*for(flagX = 0; flagX<16; flagX++){
 428   2                                        sprintf(temps, "0x%x",wholebuf[linelength-14+flagY][flagX]);
 429   2                                        temp[flagX*2] = temp[0];
 430   2                                        temp[flagX*2+1] = temp[1];
 431   2                                        //DrawScreenText(temp, flagY*8);
 432   2                                        DrawScreenText(temps,flagY*8);
 433   2                                }*/
 434   2      
 435   2      
 436   2      
 437   2      
 438   2                //DrawScreenText("this is a test", 56);
 439   2                //temps = 93;
 440   2                //DrawScreenText(temps, 40);
 441   2                if (dir == JOYSTICK_N){
 442   3                        P1_B4 = !P1_B4;
 443   3                        DrawScreenText("NORTH WAS PRESSED", 50);
 444   3                }
 445   2                /*
 446   2      
 447   2                 else if (dir == JOYSTICK_W){
 448   2                        DrawScreenText("WEST WAS PRESSED", 50);
 449   2                }
 450   2                else if (dir == JOYSTICK_S){
 451   2                                DrawScreenText("SOUTH WAS PRESSED", 50);
 452   2                        }
 453   2                else if (dir == JOYSTICK_E){
 454   2                                DrawScreenText("EAST WAS PRESSED", 50);
 455   2                        }*/
 456   2      
 457   2          // Get the user's selection
 458   2          //modeSelected = UI_getPowerMode(modeSelected);
 459   2                //DrawScreenText(testarr, 48);
 460   2      
 461   2                if(flag2 != previousflag){
 462   3                changedisplay();
 463   3                previousflag = flag2;
 464   3            }
 465   2                if(write_flag == 1){
 466   3                        write_flag = 0;
 467   3                for(k = 0; k<15; k++){
 468   4                       for(i = 0; i<16; i++){
 469   5                               if(button_flag == 1){
 470   6                                        sprintf(&temps[i],"%x",wholebuf[linelength-14+k][i]);
 471   6                                        DrawScreenText(temps, k*8);
 472   6                                }else{
 473   6                                        temp[i] = wholebuf[linelength-14+k][i];
 474   6                                        DrawScreenText(temp, k*8);
 475   6                        }
 476   5                        }
 477   4                }
 478   3                }
 479   2      
 480   2      
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 21:00:16 PAGE 9   

 481   2      
 482   2      
 483   2      
 484   2      
 485   2      
 486   2      
 487   2                     }//END OF WHILE LOOP
 488   1      
 489   1      
 490   1      } //END OF MAIN()
 491          
 492          
 493          
 494          uint8_t JOYSTICK_convert_mv_to_direction(uint32_t mV)
 495           {
 496   1               uint8_t joystickDirection;
 497   1      
 498   1           // determine which direction pad was pressed
 499   1           if ((mV <= JOYSTICK_MV_C + JOYSTICK_MV_ERROR))
 500   1           {
 501   2             joystickDirection = JOYSTICK_C;
 502   2           }
 503   1           else if ((mV >= JOYSTICK_MV_N - JOYSTICK_MV_ERROR) && \
 504   1                    (mV <= JOYSTICK_MV_N + JOYSTICK_MV_ERROR))
 505   1           {
 506   2             joystickDirection = JOYSTICK_N;
 507   2           }
 508   1           else if ((mV >= JOYSTICK_MV_E - JOYSTICK_MV_ERROR) && \
 509   1                    (mV <= JOYSTICK_MV_E + JOYSTICK_MV_ERROR))
 510   1           {
 511   2             joystickDirection = JOYSTICK_E;
 512   2           }
 513   1           else if ((mV >= JOYSTICK_MV_S - JOYSTICK_MV_ERROR) && \
 514   1                    (mV <= JOYSTICK_MV_S + JOYSTICK_MV_ERROR))
 515   1           {
 516   2             joystickDirection = JOYSTICK_S;
 517   2           }
 518   1           else if ((mV >= JOYSTICK_MV_W - JOYSTICK_MV_ERROR) && \
 519   1                    (mV <= JOYSTICK_MV_W + JOYSTICK_MV_ERROR))
 520   1           {
 521   2             joystickDirection = JOYSTICK_W;
 522   2           }
 523   1           else
 524   1             {
 525   2               joystickDirection = JOYSTICK_NONE;
 526   2             }
 527   1      
 528   1             return joystickDirection;
 529   1      }
 530          
 531          
 532          void changedisplay(void){
 533   1              if(flag2 == 1){
 534   2                      for(k = 0; k<15; k++){
 535   3                                        for(i = 0; i<16; i++){
 536   4      
 537   4                                                        sprintf(&temps[i],"%x",wholebuf[linelength-14+k][i]);
 538   4                                                        DrawScreenText(temps, k*8);
 539   4      
 540   4                                }
 541   3                      }
 542   2              }
 543   1              else if(flag2 ==-1){
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 21:00:16 PAGE 10  

 544   2                      for(k = 0; k<15; k++){
 545   3                                for(i = 0; i<16; i++){
 546   4                                        temp[i] = wholebuf[linelength-14+k][i];
 547   4                                        DrawScreenText(temp, k*8);
 548   4                                }
 549   3                      }
 550   2      
 551   2              }
 552   1      
 553   1      
 554   1      
 555   1      
 556   1      
 557   1      
 558   1              //flag2 = flag2 * -1;
 559   1      
 560   1      }
 561          
 562          
 563          
 564          
 565              // Turn off the display for Shutdown Mode
 566             // if (modeSelected == SHUTDOWN_MODE)
 567              //{
 568                //UI_disableDisplay();
 569              //}
 570          
 571              // Halt the display tick and wait for display updates to finish
 572              //TMR3CN0 &= ~TMR3CN0_TR3__BMASK;
 573              //while (BSP_DISP_CS == SPI_CS_ASSERT_LVL);
 574          
 575              // Change all input pins to analog to disable internal pullups
 576              //P0MDIN = 0x44;
 577              //P1MDIN = 0x11;
 578              //P2MDIN = 0x40;
 579              //P3MDIN = 0x10;
 580          
 581              // Enter the selected power mode
 582              //APP_enterPowerMode(modeSelected);
 583          
 584          
 585          
 586          
 587          
 588          
 589              // Restore all pins to digital mode for normal operation
 590              //P3MDIN = 0x9F;
 591              //P2MDIN = 0x7F;
 592              //P1MDIN = 0xFF;
 593              //P0MDIN = 0xFF;
 594          
 595              // Restart the display update tick
 596             // TMR3CN0 |= TMR3CN0_TR3__BMASK;
 597          
 598          
 599          
 600          
 601          //-----------------------------------------------------------------------------
 602          // Demonstrate the available power modes
 603          //-----------------------------------------------------------------------------
 604          void APP_enterPowerMode(uint8_t mode)
 605          {
 606   1        // Clear the PMU wake flags
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 21:00:16 PAGE 11  

 607   1        uint8_t wake_flags = PWR_readAndClearWakeFlags();
 608   1      
 609   1        // Start the selected power mode
 610   1        switch (mode)
 611   1        {
 612   2          case NORMAL_MODE:
 613   2            // Wait for button press on PB0
 614   2            while (BSP_PB0 != BSP_PB_PRESSED);
 615   2            break;
 616   2      
 617   2          case IDLE_MODE:
 618   2            // Interrupts must be enabled to return from Idle mode
 619   2            PWR_enterIdle();
 620   2            break;
 621   2      
 622   2          case STOP_MODE:
 623   2            // Disable VMON0 to see datasheet current (VMON0 adds ~15 uA)
 624   2            PWR_enterStop();
 625   2            break;
 626   2      
 627   2          case SUSPEND_MODE:
 628   2            // Disable VMON0 to see datasheet current (VMON0 adds ~15 uA)
 629   2            // Enter Suspend mode with port match previously enabled as the wake source
 630   2            PWR_enterSuspend();
 631   2            wake_flags = PWR_readAndClearWakeFlags();
 632   2            break;
 633   2      
 634   2          case SNOOZE_MODE:
 635   2            // Disable VMON0 to see datasheet current (VMON0 adds ~15 uA)
 636   2            // Enter Snooze mode with port match previously enabled as the wake source
 637   2            PWR_enterSnooze();
 638   2            wake_flags = PWR_readAndClearWakeFlags();
 639   2            break;
 640   2      
 641   2          case SHUTDOWN_MODE:
 642   2            // Disable VMON0 to see datasheet current (VMON0 adds ~15 uA)
 643   2            PWR_enterShutdown();
 644   2            break;
 645   2        }
 646   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2070    ----
   CONSTANT SIZE    =    158    ----
   XDATA SIZE       =    683       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
